%YAML 1.2
---
name: decomp-toolkit splits.txt
scope: source.dtk-splits
version: 2

file_extensions:
  - splits.txt

variables:
  eabi_section_names: '\.init|extab(?:index)?|\.(?:text|[cd]tors|(?:ro)?data|bss|s?(?:data|bss)2?)'
  section_identifier: '\S+'

  split_file_identifier: '[^\s:]+'

  attr_identifier: '\w+'
  section_def_kv_attr_number_value: ''
  split_file_kv_attr_number_value: 'order'
  split_kv_attr_number_value: 'align'

contexts:
  prototype:
    - match: '^\s*(#|//)'
      captures:
        1: comment.line.dtk-splits punctuation.definition.comment.dtk-splits
      push:
        - meta_content_scope: comment.line.dtk-splits
        - match: '$'
          pop: true

    # only recognized as a comment if the marker is the first non-whitespace
    # token on the line
    - match: '#|//'
      push:
        - meta_scope: invalid.illegal.not-full-line-comment.dtk-splits
        - match: '$'
          pop: true

  ################
  # main context #
  ################
  main:
    # the special Sections split at the top of the file
    - match: '^\s*(Sections)(:)'
      captures:
        1: keyword.other.section-def.dtk-splits
        2: punctuation.separator.dtk-splits
      push: section-defs

    - match: '^\s*({{split_file_identifier}})(:)'
      captures:
        1: entity.other.split.file-name.dtk-splits
           entity.name.namespace.dtk-splits # hack to get it into the symbol table
        2: punctuation.separator.dtk-splits
      push: split-file-attrs

  ###################
  # helper contexts #
  ###################
  pop_at_newline:
    - match: '$'
      pop: 1

  pop_at_new_split:
    - match: '(?=^\s*{{split_file_identifier}}:)'
      pop: 2

  pop_at_boundary:
    - match: '(?=\s)'
      pop: 1

  # mostly taken from the C syntax
  numbers:
    # hexadecimal integer
    - match: '\b(0[Xx])([[:xdigit:]]*)'
      scope: meta.number.integer.hexadecimal.dtk-splits
      captures:
        1: constant.numeric.base.dtk-splits
        2: constant.numeric.value.dtk-splits

    # decimal integer
    - match: '\d+'
      scope: meta.number.integer.decimal.dtk-splits
             constant.numeric.value.dtk-splits

  ################
  # sub-contexts #
  ################

  # section definition contexts (the first one at the top of the file)
  section-defs:
    - meta_scope: meta.section-def.dtk-splits
    - include: pop_at_new_split

    - match: '\s({{eabi_section_names}})\s'
      scope: entity.name.section.dtk-splits constant.language.section.dtk-splits
      push: section-def-attrs

    # any other unknown section names
    - match: '{{section_identifier}}'
      scope: entity.name.section.dtk-splits
      push: section-def-attrs

  section-def-attrs:
    - clear_scopes: 1
    - meta_scope: meta.section-def.dtk-splits
    - include: pop_at_newline

    # special attr: type
    - match: '(type)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits keyword.other.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.section-def.attribute.dtk-splits
        - meta_content_scope: string.unquoted.dtk-splits
        - include: pop_at_boundary

    # special attr: align
    - match: '(align)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits keyword.other.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.section-def.attribute.dtk-splits
        - include: numbers
        - include: pop_at_boundary

    # currently none; comment out to avoid rogue scoping
#   # number kv-attrs
#   - match: '({{section_def_kv_attr_number_value}})(:)'
#     captures:
#       1: entity.other.attribute-name.dtk-splits
#       2: punctuation.separator.dtk-splits
#     push:
#       - clear_scopes: 1
#       - meta_scope: meta.section-def.attribute.dtk-splits
#       - include: numbers
#       - include: pop_at_boundary

    # other kv-attrs
    - match: '({{attr_identifier}})(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.section-def.attribute.dtk-splits
        - meta_content_scope: string.unquoted.dtk-splits
        - include: pop_at_boundary

    # other k-attrs
    - match: '({{attr_identifier}})'
      scope: meta.section-def.attribute.dtk-splits entity.other.attribute-name.dtk-splits

  # split contexts
  split-file-attrs:
    # these are specifically the attributes of the file being split, not the
    # attributes of the splits themselves
    - meta_scope: meta.split.file.dtk-splits

    # number kv-attrs
    - match: '({{split_file_kv_attr_number_value}})(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.file.attribute.dtk-splits
        - include: numbers
        - include: pop_at_boundary

    # other kv-attrs
    - match: '({{attr_identifier}})(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.file.attribute.dtk-splits
        - meta_content_scope: string.unquoted.dtk-splits
        - include: pop_at_boundary

    # other k-attrs
    - match: '({{attr_identifier}})'
      scope: meta.split.file.attribute.dtk-splits entity.other.attribute-name.dtk-splits

    - match: '$'
      set: split-sections

  split-sections:
    - meta_scope: meta.split.dtk-splits
    - include: pop_at_new_split

    - match: '\s({{eabi_section_names}})\s'
      scope: entity.name.section.dtk-splits constant.language.section.dtk-splits
      push: split-attrs

    # any other unknown section names
    - match: '{{section_identifier}}'
      scope: entity.name.section.dtk-splits
      push: split-attrs

  split-attrs:
    - meta_scope: meta.split.section.dtk-splits
    - include: pop_at_newline

    # special attrs: start/end
    - match: '(start|end)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits keyword.other.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.section.attribute.dtk-splits
        - include: numbers
        - include: pop_at_boundary

    # number kv-attrs
    - match: '({{split_kv_attr_number_value}})(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.section.attribute.dtk-splits
        - include: numbers
        - include: pop_at_boundary

    # other kv-attrs
    - match: '({{attr_identifier}})(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.section.attribute.dtk-splits
        - meta_content_scope: string.unquoted.dtk-splits
        - include: pop_at_boundary

    # other k-attrs
    - match: '({{attr_identifier}})'
      scope: meta.split.section.attribute.dtk-splits entity.other.attribute-name.dtk-splits
