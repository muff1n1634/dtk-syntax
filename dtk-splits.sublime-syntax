%YAML 1.2
---
name: decomp-toolkit splits.txt
scope: source.dtk-splits
version: 2

file_extensions:
  - splits.txt

variables:
  identifier_section_known: '(?:\.init|extab(?:index)?|\.(text|[cd]tors|(ro)?data|bss|s(data|bss)2?))'
  identifier_section: '[^\s]+'

  section_types: 'code|rodata|data|bss'

contexts:
  ################
  # main context #
  ################
  main:
    # the special Sections split at the top of the file
    - match: '(Sections)(:)'
      captures:
        1: support.type.sections.dtk-splits
        2: punctuation.other.dtk-splits
      push: sections-def

    - match: '^([^\s:]+)(:)'
      captures:
        1: entity.name.file.dtk-symbols
           entity.name.namespace.dtk-symbols # only to put in symbol list
        2: punctuation.other.dtk-splits
      push: splits

  ###################
  # helper contexts #
  ###################
  pop_at_newline:
    - match: '$'
      pop: 1

  pop_at_new_split:
    - match: '(?=^([^\s:]+)(:))'
      pop: 2

  # mostly taken from the C syntax
  numbers:
    # hexadecimal integer
    - match: '\b(0[Xx])(\h*)'
      scope: meta.number.integer.hexadecimal.dtk-symbols
      captures:
        1: constant.numeric.base.dtk-symbols
        2: constant.numeric.value.dtk-symbols

    # decimal integer
    - match: '\d+'
      scope: meta.number.integer.decimal.dtk-symbols
             constant.numeric.value.dtk-symbols

  ################
  # sub-contexts #
  ################

  # section definition contexts (the first one at the top of the file)
  sections-def:
    - meta_content_scope: meta.section-def.dtk-splits
    - include: pop_at_new_split

    - match: '{{identifier_section_known}}'
      scope: constant.language.dtk-splits
      push: sections-def-attrs
    - match: '{{identifier_section}}'
      scope: entity.name.section.dtk-splits
      push: sections-def-attrs

  sections-def-attrs:
    - include: numbers
    - include: pop_at_newline
    - include: pop_at_new_split
    - match: '(type)(:)({{section_types}})'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.other.dtk-splits
        3: storage.modifier.section-type.dtk-splits
    - match: '(align)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.other.dtk-splits
        # including the numbers context should take care of the number

  # split contexts
  splits:
    - meta_content_scope: meta.split.dtk-splits
    - include: numbers
    - include: pop_at_new_split

    # these are specifically the attributes of the file being split, not the
    # splits themselves
    - match: '(order)(:)'
      captures:
        1: entity.other.attribute-name.order.dtk-splits
        2: punctuation.other.dtk-splits
        # including the numbers context should take care of the number

    - match: '$'
      set: split-sections

  split-sections:
    - include: pop_at_new_split
    - match: '{{identifier_section_known}}'
      scope: constant.language.dtk-splits
      push: split-attrs

    - match: '{{identifier_section}}'
      scope: entity.name.section.dtk-splits
      push: split-attrs

  split-attrs:
    - include: numbers
    - include: pop_at_newline
    - include: pop_at_new_split

    - match: '(start|end)(:)'
      captures:
        1: keyword.control.location.dtk-splits
        2: punctuation.other.dtk-splits

    - match: '(rename)(:)([^\s]+)'
      captures:
        1: entity.other.attribute-name.rename.dtk-splits
        2: punctuation.other.dtk-splits
        3: string.unquoted.dtk-splits

