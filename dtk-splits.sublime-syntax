%YAML 1.2
---
name: decomp-toolkit splits.txt
scope: source.dtk-splits
version: 2

file_extensions:
  - splits.txt

variables:
  split_file_name: '^\s*(?:[^\s:]+)'
  section_names: '\.init|extab(?:index)?|\.(?:text|[cd]tors|(?:ro)?data|bss|s?(?:data|bss)2?)'
  section_identifier: '[^\s]+'

contexts:
  # NOTE: just for comments in syntax_tests; the actual format does not support
  # comments
  prototype:
    - match: '#'
      scope: punctuation.definition.comment.dtk-splits
      push:
        - meta_scope: comment.line.number-sign.dtk-splits
        - match: '$'
          pop: true

  ################
  # main context #
  ################
  main:
    # the special Sections split at the top of the file
    - match: '^\s*(Sections)(:)'
      captures:
        1: keyword.other.section-def.dtk-splits
        2: punctuation.separator.dtk-splits
      push: section-defs

    - match: '^\s*({{split_file_name}})(:)'
      captures:
        1: entity.other.split.file-name.dtk-splits
           entity.name.namespace.dtk-splits # hack to get it into the symbol table
        2: punctuation.separator.dtk-splits
      push: splits

  ###################
  # helper contexts #
  ###################
  pop_at_newline:
    - match: '$'
      pop: 1

  pop_at_new_split:
    - match: '(?=^\s*{{split_file_name}}:)'
      pop: 2

  pop_at_boundary:
    - match: '(?=[\s\n])'
      pop: 1

  # mostly taken from the C syntax
  numbers:
    # hexadecimal integer
    - match: '\b(0[Xx])(\h*)'
      scope: meta.number.integer.hexadecimal.dtk-splits
      captures:
        1: constant.numeric.base.dtk-splits
        2: constant.numeric.value.dtk-splits

    # decimal integer
    - match: '\d+'
      scope: meta.number.integer.decimal.dtk-splits
             constant.numeric.value.dtk-splits

  ################
  # sub-contexts #
  ################

  # section definition contexts (the first one at the top of the file)
  section-defs:
    - meta_scope: meta.section-def.dtk-splits
    - include: pop_at_new_split

    - match: '({{section_names}})\s+'
      captures:
        1: entity.name.section.dtk-splits constant.language.section.dtk-splits
      push: section-def-attrs

    # any other unknown section names
    - match: '({{section_identifier}})\s+'
      captures:
        1: entity.name.section.dtk-splits
      push: section-def-attrs

  section-def-attrs:
    - clear_scopes: 1
    - meta_scope: meta.section-def.dtk-splits

    - include: pop_at_newline
    - include: pop_at_new_split

    - match: '(type)(:)'
      captures:
        1: entity.other.attribute-name.type.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.section-def.attribute.dtk-splits
        - include: pop_at_boundary
        - match: '\w+'
          scope: string.unquoted.dtk-splits

    - match: '(align)(:)'
      captures:
        1: entity.other.attribute-name.align.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.section-def.attribute.dtk-splits
        - include: pop_at_boundary
        - include: numbers

    # unknown attributes
    - match: '(\w+)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.section-def.attribute.dtk-splits
        - include: pop_at_boundary
        - match: '[^\s]+'
          scope: string.unquoted.dtk-splits

  # split contexts
  splits:
    - meta_scope: meta.split.file.dtk-splits
    - include: pop_at_new_split

    # these are specifically the attributes of the file being split, not the
    # splits themselves
    - match: '(order)(:)'
      captures:
        1: entity.other.attribute-name.order.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.file.attribute.dtk-splits
        - include: pop_at_boundary
        - include: numbers

    # unknown attributes
    - match: '(\w+)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.file.attribute.dtk-splits
        - include: pop_at_boundary
        - match: '[^\s]+'
          scope: string.unquoted.dtk-splits

    - match: '$'
      set: split-sections

  split-sections:
    - meta_scope: meta.split.dtk-splits
    - include: pop_at_new_split

    - match: '({{section_names}})\s+'
      captures:
        1: entity.name.section.dtk-splits constant.language.section.dtk-splits
      push: split-attrs

    # any other unknown section names
    - match: '({{section_identifier}})\s+'
      captures:
        1: entity.name.section.dtk-splits
      push: split-attrs

  split-attrs:
    - include: pop_at_newline
    - include: pop_at_new_split

    - match: '(start|end)(:)'
      captures:
        1: entity.other.attribute-name.location.dtk-splits keyword.other.location.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.attribute.dtk-splits
        - include: pop_at_boundary
        - include: numbers

    - match: '(rename)(:)'
      captures:
        1: entity.other.attribute-name.rename.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.attribute.dtk-splits
        - include: pop_at_boundary
        - match: '[^\s]+'
          scope: string.unquoted.dtk-splits

    # unknown attributes
    - match: '(\w+)(:)'
      captures:
        1: entity.other.attribute-name.dtk-splits
        2: punctuation.separator.dtk-splits
      push:
        - clear_scopes: 1
        - meta_scope: meta.split.attribute.dtk-splits
        - include: pop_at_boundary
        - match: '[^\s]+'
          scope: string.unquoted.dtk-splits
